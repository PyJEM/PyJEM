{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7375fe69",
   "metadata": {},
   "source": [
    "# Version 1.1.0\n",
    "***\n",
    "\n",
    "## To Miniconda\n",
    "\n",
    "The python environment has been changed.\n",
    "The base python environment changes to Miniconda.   \n",
    "In addition, we recommend the virtual environment (vjem) provided by JEOL as the usage environment for PyJEM. \n",
    "\n",
    "### Creating a recommended python environment \n",
    "\n",
    "* python3.5 environment is *vjem35*\n",
    "* python3.7 environment is *vjem37*\n",
    "* python3.8 environment is *vjem38*\n",
    "\n",
    "How to Use is :\n",
    "\n",
    "  1. Open the \"Anaconda Prompt\"\n",
    "  2. Write \"conda activate vjem35\" on the command line. \n",
    "\n",
    "\n",
    "## python 3.7, 3.8  \n",
    "***\n",
    " Correspondence to python 3.7, python3.8\n",
    " \n",
    "    \n",
    "## Installer encryption \n",
    "***\n",
    "I encrypted using *pycryptodome* for the installer. \n",
    "You can decrypt it with the license key that came with the delivery CD. \n",
    "If you want to decrypt it, please download the script from the following. \n",
    "\n",
    "## TEM3 (package)\n",
    "***\n",
    "### Change the connection method\n",
    "\n",
    "> Until now, when you execute \"from PyJEM import TEM3\", it was connected to TEM. However, if the connection cannot be made, a timeout of 40  \n",
    "  seconds will occur, so I changed it so that it does not connect when B is executed. The following measures have been taken to resolve this   issue. \n",
    ">\n",
    ">  * Do not connect with \"import TEM3\"\n",
    ">  * Changed timeout time to 4 seconds\n",
    ">  * The connection to TEM is changed when connect() is executed or the instance of each class is created. \n",
    ">  \n",
    ">    ex) Connection  \n",
    ">    \n",
    ">    ```python \n",
    ">    >>> from PyJEM import TEM3\n",
    ">    >>> TEM3.connect()\n",
    ">    True\n",
    ">    ```\n",
    ">\n",
    ">    **or** \n",
    ">\n",
    ">    ```python \n",
    ">    >>> from PyJEM import TEM3\n",
    ">    >>> TEM3.Apt3()\n",
    ">    True\n",
    ">    ```\n",
    "\n",
    "### Output exception \n",
    "\n",
    ">  Until now, even if execution failed, no error was output, so changed to output.\n",
    ">  \n",
    ">  ex) Nitrogen3.GetCurrentScenarioStatus()\n",
    ">    \n",
    ">    ```python\n",
    ">    >>> nit = TEM3.Nitrogen3()\n",
    ">    >>> nit.GetCurrentScenarioStatus()\n",
    ">    Traceback (most recent call last):\n",
    ">      File \"<stdin>\", line 1, in <module>\n",
    ">    RuntimeError: Function execution error. function: Nitrogen3::GetCurrentScenarioStatus, code : 26637\n",
    ">    ```\n",
    "    \n",
    "### Add Command\n",
    "\n",
    ">  * connect\n",
    ">  * isconnect\n",
    ">  * GetDefInfo (Def3)\n",
    ">  * GetContBrtInfo (Detector3)\n",
    ">  * GetHtTargetValue (GUN3)\n",
    ">  * GetHtMonitorValue (GUN3)\n",
    ">  * GetHtCurrentValue (GUN3)\n",
    ">  * SetHtWobbler (GUN3)\n",
    ">  * SetA2Wobbler (GUN3)\n",
    ">  * SetA2Rel (GUN3)\n",
    ">  * SetA2Abs (GUN3)\n",
    ">  * SetHtStts (GUN3)\n",
    ">  * GetLensInfo (Lens3)\n",
    ">  * SetStdFocus (Lens3)\n",
    ">  * SetPegMonitorSw (VACUUM3)\n",
    ">  * SetPigMonitorSw (VACUUM3)\n",
    ">  * GetPegInfo (VACUUM3)\n",
    ">  * GetPigInfo (VACUUM3)\n",
    ">  * GetSampleInformation (Nitrogen3)\n",
    ">  * GetCurrentScenarioStatus (Nitrogen3)\n",
    ">  * GetMagazineExistStatus (Nitrogen3)\n",
    ">  * TransferCartridge (Nitrogen3)\n",
    ">  * GetLiquidLevel (Nitrogen3)\n",
    "  \n",
    "### Bug fixes \n",
    ">  * Output is different between offline and online.\n",
    ">  * Stage drive related synchronization problems.\n",
    "  \n",
    "## detector (package)\n",
    "***\n",
    "    \n",
    "### Add online / offline switch method\n",
    ">  The method of switching between online and offline has been changed as follows. \n",
    ">  \n",
    ">  **ONLINE**\n",
    ">  \n",
    ">  ```python \n",
    ">  >>> from PyJEM import detecotor\n",
    ">  >>> detector.online()\n",
    ">  ```\n",
    ">  \n",
    ">  **OFFLINE**\n",
    ">  \n",
    ">  ```python \n",
    ">  >>> from PyJEM import detecotor\n",
    ">  >>> detector.offline()\n",
    ">  ```\n",
    ">\n",
    ">  online/offline check command. \n",
    ">  \n",
    ">  ```python \n",
    ">  >>> from PyJEM import detecotor\n",
    ">  >>> detector.isonline()\n",
    ">  ```\n",
    "  \n",
    "### Changed the setting method of IP Address.\n",
    ">\n",
    ">  ```python \n",
    ">  >>> from PyJEM import detecotor\n",
    ">  >>> detector.change_ip(ip)\n",
    ">  ```  \n",
    "\n",
    "### sightx is packaged separately\n",
    ">  I used to switch between B and C with a function, but I changed it to switch for each package.\n",
    ">  \n",
    ">  **detector**\n",
    ">  \n",
    ">  ```python \n",
    ">  >>> from PyJEM import detecotor\n",
    ">  ```\n",
    ">  \n",
    ">  **sightx**\n",
    ">  \n",
    ">  ```python \n",
    ">  >>> from PyJEM import sightx\n",
    ">  ```  \n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
