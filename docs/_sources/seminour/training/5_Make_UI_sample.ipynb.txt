{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# UIを作ってみる"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 : camera\n",
      "1 : STEM Image\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "import PyQt4.QtCore as QtCore\n",
    "import PyQt4.QtGui as QtGui\n",
    "\n",
    "import PyJEM.offline\n",
    "from PyJEM.offline import detector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "detectName = detector.detectors[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class MainMenu(QtGui.QWidget):\n",
    "    def __init__(self,parent=None):\n",
    "        QtGui.QWidget.__init__(self, parent=parent)\n",
    "        self.setWindowTitle('PyJEM Sample')    \n",
    "        self.setGeometry(10,10,40,300)\n",
    "        button = QtGui.QPushButton('Capture',self)\n",
    "        self.Label = QtGui.QLabel(self)\n",
    "        self.Label.setGeometry(20,20,512,512)\n",
    "#        self.connect(button,QtCore.SIGNAL('clicked()'),self.show_image)\n",
    "        # offline\n",
    "        self.connect(button,QtCore.SIGNAL('clicked()'),self.show_image_offline)\n",
    "        # online\n",
    "        # self.connect(button,QtCore.SIGNAL('clicked()'),self.show_image_online)\n",
    "\n",
    "    def get_detectorname(self):\n",
    "        data = detector.get_attached_detector()\n",
    "        self.Label.setText(data[0])\n",
    "        \n",
    "    def show_image_online(self, extention=\"jpg\"):\n",
    "        det = detector.Detector(detectName)\n",
    "        data = det.snapshot(extention, filename=\"snapshot\",save=True)\n",
    "        file = detector.base.imagefilepath + \"\\\\snapshot.\" + extention\n",
    "        self.pixmap = QtGui.QPixmap(file)\n",
    "        self.Label.setPixmap(QtGui.QPixmap(file))\n",
    "\n",
    "    def show_image_offline(self, extention=\"jpg\"):\n",
    "        file = \"{0}\\\\resource\\\\SnapShot.{1}\".format(PyJEM.offline.__file__.rsplit(\"\\\\\", 1)[0], extention)\n",
    "        self.pixmap = QtGui.QPixmap(file)\n",
    "        self.Label.setPixmap(QtGui.QPixmap(file))\n",
    "        \n",
    "    def changeText(self):\n",
    "        self.Label.setText(\"abcd\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "application = QtGui.QApplication(sys.argv)\n",
    "\n",
    "main = MainMenu()\n",
    "main_window =QtGui.QMainWindow()\n",
    "main_window.setCentralWidget(main)\n",
    "main_window.show()\n",
    "\n",
    "application.exec_()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
