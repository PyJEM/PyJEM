{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime\n",
    "from PyJEM.offline import TEM3\n",
    "\n",
    "# 出力する表をNoteBook内に表示する\n",
    "%matplotlib inline     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def emission_log(count, sleeptime=1):\n",
    "    \"\"\"\n",
    "    | A function that acquires the current emission value and writes it to the log file.\n",
    "    | arg1: number of trials\n",
    "    | arg2: Emission acquisition sleep time (s)\n",
    "    | output: None\n",
    "    \"\"\"\n",
    "    _gun_instance = TEM3.GUN3()\n",
    "    file = open(\"log.txt\", \"w\")\n",
    "    x = []\n",
    "    y = []\n",
    "    for i in range(count):\n",
    "        value = _gun_instance.GetEmissionCurrentValue()\n",
    "        x.append(i)\n",
    "        y.append(value)\n",
    "        print(\"Emission Value: \" + str(value))\n",
    "\n",
    "        ##logfileへの書き込み\n",
    "        date = datetime.datetime.today()\n",
    "        write_data = date.strftime(\"%Y/%m/%d_%H:%M:%S \") + \"EmissionValue: \" + str(value) + \"\\n\"\n",
    "        file.write(write_data)\n",
    "        time.sleep(interval_time)\n",
    "    file.close()\n",
    "\n",
    "    plt.plot(x, y, \"-\")\n",
    "    plt.xlabel(\"Count\")\n",
    "    plt.ylabel(\"EmissionValue\")\n",
    "    plt.title(\"EmissionCurrentValue\")\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def open_log(fileName):\n",
    "    file = open(fileName, \"r\")\n",
    "    for row in file:\n",
    "        print(row)\n",
    "\n",
    "    file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "試行回数: 10\n",
      "Interval time: 1\n",
      "Emission Value: 0.0\n",
      "Emission Value: 0.0\n",
      "Emission Value: 0.0\n",
      "Emission Value: 0.0\n",
      "Emission Value: 0.0\n",
      "Emission Value: 0.0\n",
      "Emission Value: 0.0\n",
      "Emission Value: 0.0\n",
      "Emission Value: 0.0\n",
      "Emission Value: 0.0\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1b90704f898>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "count = int(input(\"試行回数: \"))\n",
    "if count == None:\n",
    "    print(\"Please set the number of trials.\")\n",
    "    count = 1\n",
    "interval_time = int(input((\"Interval time: \")))\n",
    "if interval_time ==  None:\n",
    "    interval_time = 1\n",
    "\n",
    "emission_log(count,time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
