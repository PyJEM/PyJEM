{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary\n",
    "***\n",
    "  In recent years, there is an increasing demand to automatically control from \n",
    "TEM control to acquisition of images, and to control the TEM remotely. \n",
    "Until now, it was necessary to organize programs using TEM external control \n",
    "(TEMExt) written in C ++, but there are problems such as the high level of \n",
    "hurdling to create programs in C ++ language and few functions available in TEMExt had.  \n",
    " PyJEM solved these problems. Since PyJEM is a python library, \n",
    "we can interactively control TEM. \n",
    "In addition, functions available from existing TEMExt are powered up, enabling remote control.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Environment\n",
    "***\n",
    "### OS\n",
    "* Windows&reg; 7 64bit \n",
    "* Windows&reg; 10 64bit \n",
    "* Windows&reg; 11 64bit \n",
    "\n",
    "### Python version\n",
    " * Python 3.5 64bit\n",
    " * Python 3.7 64bit\n",
    " * Python 3.8 64bit\n",
    " * Python 3.9 64bit\n",
    " * Python 3.10 64bit\n",
    "\n",
    "### Relative library\n",
    " * opencv-python\n",
    " * httplib2\n",
    " * comtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions\n",
    "***\n",
    " You can use the existing TEM External(TEM3) published by JEOL and control the detector. \n",
    " Below is an example of the functionality. \n",
    " \n",
    "### Electronic optical system control\n",
    "* Beam control\n",
    "* magnification change\n",
    "* brightness change \n",
    "* etc.. \n",
    "\n",
    "### Stage control\n",
    "* Absolute position movement\n",
    "* Relative position movement\n",
    "* Piezoelectric movement\n",
    "* etc..\n",
    "\n",
    "### detector control\n",
    "* capture image by JEOL camera and STEM detector.\n",
    "* hardware insert / retract.\n",
    "* change mage storage type\n",
    "* Change of imaging conditions\n",
    "* etc..\n",
    "\n",
    "### Auto function\n",
    "Call functions available in the TEM Center. \n",
    "\n",
    "* Auto Focus\n",
    "* Auto Contrast Brightness\n",
    "* Auto Stigmator\n",
    "* etc.."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Connection model\n",
    "***\n",
    "You can use Python environment on TEM PC or another PC and use it on PC which installed \n",
    "PyJEM (python library). When you execute the script code including PyJEM, \n",
    "processing is thrown to TEM main unit via TEMCenter.\n",
    "\n",
    "![](image/pyjem_rest.png)\n",
    "\n",
    "### TEMPC\n",
    "The figure below shows the communication model when PyJEM is on the TEMPC. Since the communication is between the same, the IP address will be 127.0.0.1. \n",
    "\n",
    "![](image/PyJEM_in_TEMPC.png)\n",
    "\n",
    "### RemotePC\n",
    "It is a model that builds a PyJEM environment on a PC other than TEMPC and controls TEM. \n",
    "It is possible to write python script code with NotePC (etc.) and execute it with Remote. \n",
    "When executing from a remote place, work such as having the TEM connected to the in-house LAN etc. may be necessary.\n",
    "\n",
    "![TEMPC](image/PyJEM_in_OtherPC.png)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Forum (Message Board)\n",
    "***\n",
    "Publish the sharing place(Forum) about PyJEM to GitHub. \n",
    "To use Forum, you need a GitHub account. In this Forum, you can share script code, \n",
    "exchange information, and browse. From JEOL, \n",
    "we will publish manuals such as how to use PyJEM and answer questions about PyJEM.\n",
    "\n",
    "PyJEM Forum URL：\n",
    "　[PyJEM Forum](https://github.com/PyJEM)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
